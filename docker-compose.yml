
services:
  postgres:
    image: postgres:16
    env_file:
      - .env
    restart: always
    environment:
      POSTGRES_DB: ${DB_NOME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_SENHA}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - my_network

  python-back:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: diarias-backend
    volumes:
      - ./:/app
    networks:
      - my_network
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    env_file:
      - .env
    restart: always
    
  frontend:
    build:
      context: /home/jenkins/workspace/diarias_dev/diarias-front
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    networks:
      - my_network
    env_file:
      - .env
    restart: always

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
       - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certificate.crt:/etc/nginx/ssl/certificate.crt
      - ./private.key:/etc/nginx/ssl/private.key
      
    depends_on:
      - frontend
    networks:
      - my_network
    restart: always

  prometheus:
    image: prom/prometheus:v2.38.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always
    networks:
      - my_network

  alertmanager:
    image: prom/alertmanager:v0.23.0
    container_name: alertmanager
    ports:
      - "9095:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - my_network
    restart: always

  node-exporter:
    image: prom/node-exporter:v1.3.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - my_network
    restart: always

  portainer_agent:
    container_name: portainer_agent
    image: portainer/agent:latest
    restart: always
    ports:
      - "9001:9001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - my_network

networks:
  my_network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
